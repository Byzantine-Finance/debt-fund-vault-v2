// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {stdJson} from "../../lib/forge-std/src/StdJson.sol";

import "./ERC4626AdapterIntegrationTest.sol";

/// @dev This test uses claim data generated by the claimer bot on base fork
contract ERC4626AdapterIntegrationClaimTest is ERC4626AdapterIntegrationTest {
    uint256 internal initialDeposit = 100000e6; // 100,000 USDC

    // Base contracts and fork block
    uint256 constant BASE_FORK_BLOCK = 34750485; // Block with bot generated claim data (base)
    IERC20 constant baseUSDC = IERC20(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913);
    IERC4626 constant baseStataUSDC = IERC4626(0xC768c589647798a6EE01A91FdE98EF2ed046DBD6);
    address constant baseMerklDistributor = 0x3Ef3D8bA38EBe18DB133cEc108f4D14CE00Dd9Ae;

    // Claiming data (bot generated)
    address internal adapterAddr;
    address internal rewardToken;
    uint256 internal rewardAmount;
    bytes internal claimData;

    // Load claim data from JSON file
    string internal root = vm.projectRoot();
    string internal path = string.concat(root, "/test/data/claim_data_merkl_base.json");

    function setUp() public virtual override {
        // Create base fork
        rpcUrl = vm.envString("BASE_RPC_URL");
        forkId = vm.createFork(rpcUrl, BASE_FORK_BLOCK);
        vm.selectFork(forkId);
        skipMainnetFork = true;

        // Set base contracts
        usdc = baseUSDC;
        stataUSDC = baseStataUSDC;
        merklDistributor = baseMerklDistributor;

        super.setUp();

        vault.deposit(initialDeposit, address(this));

        vm.prank(allocator);
        vault.allocate(address(erc4626Adapter), hex"", initialDeposit);
    }

    function testClaim() public {
        _loadClaimData(path);

        // etch adapter logic to local contract --> gives the adapter the ability to claim
        vm.etch(adapterAddr, address(erc4626Adapter).code);

        // Set claimer role in etched adapter
        vm.prank(curator);
        IERC4626Adapter(adapterAddr).setClaimer(rewardClaimer);
    
        // Claim and swap Merkl rewards
        vm.prank(rewardClaimer);
        IERC4626Adapter(adapterAddr).claim(claimData);
    }

    function _loadClaimData(string memory _path) internal {
        string memory json = vm.readFile(_path);

        adapterAddr = stdJson.readAddress(json, ".adapterAddr");
        rewardToken = stdJson.readAddress(json, ".rewardToken");
        rewardAmount = stdJson.readUint(json, ".rewardAmount");
        claimData = stdJson.readBytes(json, ".claimCalldata");

        vm.label(adapterAddr, "baseRealAdapter");
        vm.label(rewardToken, "rewardToken");
    }
}
